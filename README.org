#+title: Self Repaying ENS
#+author: Wary

An Alchemix user can subscribe to the Self Repaying ENS service to automatically renew an expired ENS name. The renewal fee is paid by adding some self repaying debt to the user Alchemix account üßôü™Ñüí∏. It was made for [[https://gitcoin.co/hackathon/moneylegos][Gitcoin's Money Legos Hackaton]].


* üåç Overview

The Self Repaying ENS is a smart contract written in Solidity that uses:
- the [[https://alchemix.fi/][Alchemix Protocol]] to manage users self repaying debt
- the [[https://curve.fi][Curve Protocol]] to exchange alETH and ETH
- the [[https://ens.domains/][Ethereum Name System]] to manage the ENS names
- the [[https://www.gelato.network/][Gelato Network]] to automate the smart contract actions


* üßê How to use

‚ö† Prerequisites:
- Register a ENS name
- Deposit enough funds to the =alETH AlchemistV2= contract to cover renewals fees
- Allow the =AlETHRouter= contract to mint enough =alETH= debt to cover multiple renewals. See the [[https://github.com/The-Wary-One/aleth-router#-how-to-use][AlETHRouter README]]

** To subscribe to the =Self Repayins ENS= renewal service for a name:
1. Allow the =SelfRepayinENS= contract to use the =AlETHRouter= contract on your behalf by calling =alETHRouter.approve(<srens address>, <approve amount>)=
2. Subscribe to the =SRENS= service for a name by calling =srens.subscribe(<name>)=. Use the =multicall= feature to subscribe or unsubscribe for multiple names

Voila ! ü•≥
That's it for the user actions.

This is where the automated actions start:
 - Subscribing to the service for this name creates a =Gelato= task that regularly checks if the name should be renewed by calling =srens.checker()=. You can get your =taskId= by calling =srens.getTaskId(<your address>, <name>)=
 - =SRENS= tries to get the lower renewal price by limiting the allowed =gasprice=. You can get the maximum =gasprice= limit for a name by calling =srens.getVariableMaxGasPrice(<name>)=. For more information on the =gasprice= limit formula, checkout the =srens._getVariableMaxGasPrice()= comments
 - Once =srens.checker()= returns =true= for a name, =Gelato= tells =SRENS= to renew it by calling =srens.renew()=
 - To renew it, =SRENS= mint enough =alETH= debt to pay for the renewal and =Gelato= fees in =ETH= by calling =alETHRouter.borrowAndSendETHFrom(<your address>, <amount>)= then it calls =ETHRegistrarController.renew()=

** To unsubscribe to the =Self Repaying ENS= renewal service for a name:
1. unsubscribe to the =SRENS= service for a name by calling =srens.unsubscribe(<name>)=. Use the =multicall= feature to subscribe or unsubscribe for multiple names

Voila ! ü•≥
That's it for the user actions.

- It cancels its corresponding =Gelato= task

* üöö How to install

‚ö† Prerequisites:
- [[https://git-scm.com/downloads][git]]
- [[https://www.rust-lang.org/][rust]]
- [[https://book.getfoundry.sh/getting-started/installation][foundry]]
- [[https://stedolan.github.io/jq/][jq]]

Clone this repository and install the dependencies
#+begin_src bash
git clone git@github.com:The-Wary-One/self-repaying-ens.git
mkdir self-repaying-ens
forge install
#+end_src


* üë∑ How to test

The tests needs to be run in a Mainnet fork.
Set the environment variables with your API keys
#+begin_src bash
cat .env.example > .env
vim .env
#+end_src

Run the tests
#+begin_src bash
./test.sh
#+end_src


* üèÉ How to run locally

Set the environment variables with your API keys
#+begin_src bash
cat .env.example > .env
vim .env
#+end_src

Start [[https://book.getfoundry.sh/anvil/][anvil]] as a Mainnet fork in a terminal
#+begin_src bash
./tasks/start-fork-local.sh
#+end_src

Run the local setup task
#+begin_src bash
./tasks/setup-env-local.sh
#+end_src

Now play with the app using the other tasks inside the =tasks= directory. ü•≥


